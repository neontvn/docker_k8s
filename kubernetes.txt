Docker Terminology

Kubernetes Terminology

1. Kubernetes Cluster - collection of nodes
2. Node - Virtual machine that will run code
3. Pods - Running container. Technically a pod can run multiple containers
4. Deployment - Monitors a set of pods, makes sure they are running and restarts if crashed
5. Service - Provides an easy to remember URL to access a running container

Kubernetes Config Files
 - Tells Kubernetes about the Deployments, Pods, Services ( Referred to as Objects )
 - Written in YAML syntax
 - Documentation

___________________________________________________________________________________________

Creating a Pod ( With example and explaination )

File - posts.yaml

apiVersion : v1
kind : Pod              // Type of Object we want to create
metadata :
    name : posts        // pod is given name of posts
spec :                  // Exact attributes  we want to apply to the object
    containers:         // We can create multiple containers inside a pod
        - name : posts                      // Container with name posts
          image : hungryshark/posts:0.0.1   // Image from which it is going to be created
          imagePullPolicy: IfNotPresent

kubectl apply -f posts.yaml     // To tell kubernetes to use this config file

kubectl get pods                        // Get information of the existing pods
kubectl exec -it [pod-name][command]    // Execute the given command in a running pod
kubectl logs [pod-name]                 // Prints out logs from the given pod
kubectl delete pod [pod-name]           // Delete the pod
kubectl apply -f [config file name]     // Tell k8s to process the config
kubectl describe pod [pod-name]         // Print out some information about the running pod
___________________________________________________________________________________________


DEPLOYMENTS

- Rather than creating individual pods we create a Deployment object which manages a set of k8s pods.
- Pod crashes, then deployment automatically creates the pods for us.
- Version of pods may change in due course of time. Deployment helps in managing the same.

CREATING A DEPLOYMENT

File - posts-depl.yaml

apiVersion : apps/v1
kind : Deployment               // Type of Object we want to create
metadata : 
    name : posts-depl           // Name of the deployment   
spec :                          // How deployment should behave
    replicas : 1                // Number of pods running a particular image
    selector :                  // Deployment gets to know which pods to manage
        matchLabels :
            app : posts         // Key : Value can be xyz : posts as well
    template :                  // Specify exact config of pod to be created
        metadata :
            labels:
                app : posts     // Key : value pair assigned same as above
        spec :                  // Config of pods
            containers :            // Container created in pod
                -   name : posts    // Container with name posts
                    image : hungryshark/posts:latest    // Image to be run in the container
